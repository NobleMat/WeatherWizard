//
//  PPlaceListViewController.swift
//  PuntersWeather
//
//  Created by Noble Mathew on 26/6/17.
//  Copyright (c) 2017 NTech. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreData

protocol PPlaceListViewControllerInput {
  func loadData()
}

protocol PPlaceListViewControllerOutput {
  func getWeatherData()
}

class PPlaceListViewController: UIViewController, PPlaceListViewControllerInput {
  var output: PPlaceListViewControllerOutput!
  var router: PPlaceListRouter!
  
  //MARK: - VC Elements
  
  @IBOutlet weak var listCollectionView: UICollectionView!
  
  let cellIdentifier = "WeatherCell"
  var weatherItems = [Weather]()
  var filteredItems = [Weather]()
  var isFiltered = false
  let managedContext = CoreDataStack.shared.persistentContainer.viewContext
  
  // MARK: - Object lifecycle
  override func awakeFromNib() {
    super.awakeFromNib()
  }
  
  // MARK: - View lifecycle
  override func viewDidLoad() {
    super.viewDidLoad()
    PPlaceListConfigurator.sharedInstance.configure(viewController: self)
    
    self.title = "WW"
    self.navigationController?.regularNavigationBar()
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    
    WeatherActivityIndicator.showActivityIndicator(self.view)
    output.getWeatherData()
  }
  
  // MARK: - Event handling
  func loadData() {
    let weatherDataUpdate: NSFetchRequest<Weather> = Weather.fetchRequest()
    do {
      weatherItems = try managedContext.fetch(weatherDataUpdate)
      weatherItems = weatherItems.sorted {
        $0.0.placeName! < $0.1.placeName!
      }
      DispatchQueue.main.async {
        WeatherActivityIndicator.hideActivityIndicator(self.view)
        self.listCollectionView.reloadData()
      }
    } catch {
      print("Error fetching data \(error.localizedDescription)")
    }
  }
  
  lazy var menuView: MenuView = {
    let menu = MenuView()
    menu.homeController = self
    return menu
  }()
  @IBAction func filterResults(_ sender: Any) {
    menuView.showSettings(.filter)
  }
  
  @IBAction func refreshList(_ sender: Any) {
    WeatherActivityIndicator.showActivityIndicator(self.view)
    output.getWeatherData()
  }
  
 
  @IBAction func sortList(_ sender: Any) {
    //Show sort menu to figure out way to sort
    menuView.showSettings(.sort)
  }

}


//MARK: - CollectionView Delegate
extension PPlaceListViewController: UICollectionViewDelegate {
  
  /**
   The Delegate method to tell the collectionView, what to do when a colectionView
   cell is tapped.
   */
  func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    
  }
  
  func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
    cell.alpha = 0
    
    let transform = CATransform3DTranslate(CATransform3DIdentity, -200, 0, 0)
    cell.layer.transform = transform
    
    UIView.animate(withDuration: 1.0) { 
      cell.alpha = 1
      cell.layer.transform = CATransform3DIdentity
    }
  }
  
}

//MARK: - CollectionView DataSource
extension PPlaceListViewController: UICollectionViewDataSource {
  
  /**
   Delegate method to set the number of rows per collection
   */
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    print("count \(weatherItems.count)")
    if isFiltered {
      return filteredItems.count
    }
    return weatherItems.count
  }
  
  /**
   optional Delegate method to set the number of sections
   */
  func numberOfSections(in collectionView: UICollectionView) -> Int {
    return 1
  }
  
  /**
   CollectionView DataSource method to set the cell for each item
   */
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath) as! PPlaceListCollectionViewCell
    
    var weatherData: Weather!
    if isFiltered {
      weatherData = filteredItems[indexPath.item]
    } else {
      weatherData = weatherItems[indexPath.item]
    }
    
    cell.placeNameLabel.text = weatherData.placeName
    cell.temperatureLabel.text = "\(weatherData.weatherTemperature) Âºc"
    cell.lastUpdateLabel.text = "last updated on \(weatherData.weatherLastUpdated.convertToString())"
    cell.weatherConditionLabel.text = weatherData.countryDetails?.countryName
    
    return cell
  }
}
