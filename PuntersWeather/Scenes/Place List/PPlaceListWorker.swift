 //
 //  PPlaceListWorker.swift
 //  PuntersWeather
 //
 //  Created by Noble Mathew on 26/6/17.
 //  Copyright (c) 2017 NTech. All rights reserved.
 //
 //  This file was generated by the Clean Swift Xcode Templates so you can apply
 //  clean architecture to your iOS and Mac projects, see http://clean-swift.com
 //
 
 import UIKit
 import CoreData
 
 class PPlaceListWorker {
  // MARK: - Business Logic
  
  let managedContext = CoreDataStack.shared.persistentContainer.viewContext
  
  /**
   This method is used to fetch the data from 'http://dnu5embx6omws.cloudfront.net/venues/weather.json'.
   The fetched data is then stored into a model and is then shownin the viewController
   */
  func fetchWeatherData(completion: @escaping(Bool) -> ()) {
    self.clearData()
    //Setting up the URL Request
    guard let endpointURL = URL(string: mainURL) else {
      print("Endpoint URL error")
      completion(false)
      return
    }
    let urlRequest = URLRequest(url: endpointURL)
    
    
    //Setting up the Session
    let config = URLSessionConfiguration.default
    let session = URLSession(configuration: config)
    
    //Making the request & Fetching the data
    let task = session.dataTask(with: urlRequest) { (fetchedData, response, error) in
      //If error, then stop
      if let error = error {
        print("Error fetching: \(error.localizedDescription)")
        completion(false)
      }
      
      guard fetchedData != nil else {
        print("Error: Did not receive any data")
        completion(false)
        return
      }
      
      //Parse JSON
      do {
        if let fetchedData = fetchedData {
          guard let weatherDetails = try JSONSerialization.jsonObject(with: fetchedData, options: []) as? [String: Any] else {
            print("Error converting JSON Data")
            completion(false)
            return
          }
          
          //Move data into Model Objects/ Core data
          let weatherData = weatherDetails["data"] as? [[String: Any]]
          if let weatherData = weatherData {
            for weather in weatherData {
              print("Details as \n" + weather.description)
              let weatherItem = Weather(context: self.managedContext)
              weatherItem.venueID = Int32(weather[venueIDString] as! String)!
              weatherItem.placeName = weather[placeNameString] as? String
              weatherItem.weatherCondition = weather[weatherConditionString] as? String
              weatherItem.weatherWind = weather[weatherWindString] as? String
              weatherItem.weatherHumidity = weather[weatherHumidityString] as? String
              if let weatherTemperatureString = weather[weatherTemperatureString] as? String, let weatherTemperature = Double(weatherTemperatureString) {
                weatherItem.weatherTemperature = weatherTemperature
              }
              if let weatherFeelsLikeString = weather[weatherFeelsLikeString] as? String, let weatherFeelsLike = Double(weatherFeelsLikeString) {
                weatherItem.weatherFeelsLike = weatherFeelsLike
              }
              if let weatherLastUpdate = weather[weatherLastUpdateString] as? Double {
                weatherItem.weatherLastUpdated = weatherLastUpdate
              }
              
              //Country Details
              if let countryData = weather[countryString] as? [String: Any] {
                let countryItem = Country(context: self.managedContext)
                countryItem.countryID = Int32(countryData[countryIDString] as! String)!
                countryItem.countryName = countryData[countryNameString] as? String
                
                weatherItem.countryDetails = countryItem
              }
              
              //Sport Details
              if let sportData = weather[sportString] as? [String: Any] {
                let sportItem = Sport(context: self.managedContext)
                sportItem.sportID = Int32(sportData[sportIDString] as! String)!
                sportItem.sportDescription = sportData[sportDescriptionString] as? String
                
                weatherItem.sportDetails = sportItem
              }
              
              if !self.exists(Int(weatherItem.venueID)) {
                do {
                  try self.managedContext.save()
                } catch {
                  print("Error saving data \(error.localizedDescription)")
                  completion(false)
                }
              }
            }
          }
          completion(true)
        }
      } catch {
        print("Error converting JSON Data")
        completion(false)
        return
      }
      
    }
    task.resume()
  }
  
  /**
   Check if the entity exists in db
   
   - parameter venueID: Primary key for the entity
   
   - returns : A boolean value depicting if the element exists
   */
  func exists(_ venueID: Int) -> Bool {
    let fetchRequest: NSFetchRequest<Weather> = Weather.fetchRequest()
    fetchRequest.predicate = NSPredicate(format: "venueID = \(venueID)", argumentArray: nil)
    
    do {
      let res = try managedContext.fetch(fetchRequest)
      print("\(venueID) : \(res.count)")
      return res.count > 0 ? true : false
    } catch {
      return false
    }
  }
  
  /**
   Clear all data from the core data stack
   */
  func clearData() {
    do {
      let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: weatherEntityName)
      let objects = try managedContext.fetch(fetchRequest) as! [Weather]
      
      for object in objects {
        managedContext.delete(object)
      }
      try managedContext.save()
    } catch {
      print("Coudl not delete \(error.localizedDescription)")
    }
  }
  
 }
 
 
